git init
# creates a new git repository in the current directory

git log
# returns "fatal: bad default revision 'HEAD', because no commits were made yet

git status
# shows on which branch we are, wich most recent commit and what files aren't committed yet

What happens when you initialize a repository? Why do you need to do it?
-> a new repository is created, but no commit is automatically done
-> if I want to create a new project then I need to do it to get it under Git version control

With git init you create a new empty directory. You can then go ahead and add files from your working directory to a stating area, meaning selecting the appropriate files, and then committing these to the repository.

git add filename
# adds existing files to the staging area, ready to commit

git status
# shows the added files as new files and not untracked files

How is the staging area different from the working directory and the repository? What value do you think it offers?
-> it's more of a preparation layer than anything else
-> it's useful for carefully selecting files to commit without losing track of everything

git commit
# command to commit your files in the staging area

git commit -m "commit message"
# commit command with a commit message specified on the command line

git config --global user.name "Your Name"
git config --global user.email you@example.com
# used to configure name and email address used with commits

git commit --amend --reset-author
# fix a commit with the wrong author after setting it right with git config

git diff
# with no argument git diff compares the working directory to the staging area

git diff --staged
# compares the staging area to the last commit in the repository

git reset --hard
# resets all changes in the working dir and staging area - careful!!

How can you use the staging area to make sure you have one commit per logical change?
-> with git add and diff you can be sure that only files with the logical change are added

git branch
# shows all branches and highlights the one you are workng on

git branch branchname
# creates a new branch

git checkout branchname
# switches to the branch

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-> when new features are introduced that are experimental or edit core logic that is to be preserved or that adds a new language or logic

git log --graph --oneline master coins
# soo see a graphical overview of the logs

git checkout -b branchname
# creates a new branch and checks it out, shorthand for the two upper commands

How do the diagrams help you visualize the branch structure?
-> shows their history and which commits are unreachable

git show commitid
# shows changes only from direct parent

git merge branchname branchname2
# to merge two branches together

git merge --abort
# if you run into a merge conflict and want to undo the merge

-----------------------------
# How to merge

git checkout branch-to-merge-to
# switch to the branch to merge something to

git merge branch-to-merge-from branch-to-merge-to
# merge one branch to the other

git status
# shows unmerged paths and other information

# open conflicting files, search for "HEAD" and resolve the conflicts

git add conflicting-file
# after resolving all conflicts, add the files to the staging mode

git commit
# commit the changes from the staging area

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
With automatic merging you know that there is no faulty error through the merging itself introduced, manual merging allows for individual analysis of merge conflicts, which gives greater flexibility, but also greater risk for mistakes.
